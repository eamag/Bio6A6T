#! /usr/bin/env python
# -*- coding: utf-8 -*- 
from Bio import SeqIO
from Levenshtein import distance
import os
NumOfDif = 2#input("Enter Number of difference from 6A6T: ")+1
way = '/home/eamag/Bio'
cout = open('out.txt', 'w')
cout.write('Name\tMotif'+'\t'+'Coordinate'+'\t'+'Strand'+'\t'+'Name'+'\t'+'Upstream'+'\t'+'Upstream dist'+'\t'+'Downstream'+'\t'+'Downstream dist'+'\n')
def SplitForLoc(handle):
	line = handle.readline()

	line = handle.readline()
	parts = line.rstrip().split()
     	if len(parts) <> 2 or parts[1].lower() <> "proteins" :
        	 raise SyntaxError("Second line not recognised as an NCBI Protein Table (PTT file)")	
	line = handle.readline().strip()
    	if line.rstrip() <> "Location\tStrand\tLength\tPID\tGene\tSynonym\tCode\tCOG\tProduct" :
         	raise SyntaxError("Third line not recognised as an NCBI Protein Table (PTT file)")
	LOCATION = 0
	STRAND = 1
	PRODUCT = 8
	
	mapping = {
		LOCATION:'location',
		STRAND: 'strand',
		PRODUCT:'product',
	}	

	for line in handle:
		parts=line.rstrip().split('\t')
		loc=parts[LOCATION].split('..')
		loc.append(parts[PRODUCT])
		loc.append(parts[STRAND])
		yield loc

for d, dirs, files in os.walk(way):
	for names in files:
		if (names[-4:-1]+names[-1])=='.fna':
			
			path = os.path.join(d,names)
				
			if os.path.exists(path)==True:		
				handle = open(path)
				for record in SeqIO.parse(handle, "fasta") :
		 		 x="AAAAAATTTTTT"
		 		 w=record.seq
		 		 
		 		 for i in range (0, len(str(w))-12):
		 		     if distance(x, str(w)[i:(i+12)])<NumOfDif:
		 		        
		  			#print (str(w)[i:(i+12)],i)
			 		
				
					for d, dirs, files in os.walk(way):
						for names2 in files:
							if ((names[0:-4]+'.ptt')==names2):
								path2 = os.path.join(d,names2)
								if os.path.exists(path2)==True:
									path3=path.split('/')
									handle2=open(path2)
									loclist=[]
									k=0
									for loc in SplitForLoc(handle2) :
										loclist.append(loc)
										k+=1
								
										if i>int(loc[0]) and i<int(loc[1]):
											cout.write(path3[-2]+'\t'+str(w)[i:(i+12)]+'\t'+str(i)+'\t'+loc[3]+'\t'+loc[2]+'\t'+'none'+'\t'+'none'+'\t'+'none'+'\t'+'none'+'\n')
									
										if i>int(loclist[k-2][1]) and i<int(loclist[k-1][0]):
									
											if (loclist[k-2][3]=='-' and loclist[k-1][3]=='-'):#strand is '-' both
												cout.write(path3[-2]+'\t'+str(w)[i:(i+12)]+'\t'+str(i)+'\t'+'none'+'\t'+'none'+'\t'+loclist[k-2][2]+'\t'+str(i-int(loclist[k-2][1]))+'\t'+loclist[k-1][2]+'\t'+str(int(loclist[k-1][0])-i)+'\n')
											elif (loclist[k-2][3]=='+' and loclist[k-1][3]=='+'):#strand is '+' both
												cout.write(path3[-2]+'\t'+str(w)[i:(i+12)]+'\t'+str(i)+'\t'+'none'+'\t'+'none'+'\t'+loclist[k-1][2]+'\t'+str(int(loclist[k-1][1])-i)+'\t'+loclist[k-2][2]+'\t'+str(i-int(loclist[k-2][0]))+'\n')

											elif (loclist[k-2][3]=='+' and loclist[k-1][3]=='-'):#first strand + and second - down/down
												cout.write(path3[-2]+'\t'+str(w)[i:(i+12)]+'\t'+str(i)+'\t'+'none'+'\t'+'none'+'\t'+'none'+'\t'+'none'+'\t'+loclist[k-1][2]+'/'+loclist[k-2][2]+'\t'+str(int(loclist[k-1][1])-i)+'/'+str(i-int(loclist[k-2][0]))+'\n')
											elif (loclist[k-2][3]=='-' and loclist[k-1][3]=='+'):#first strand - and second + upstream/upstream
												
												cout.write(path3[-2]+'\t'+str(w)[i:(i+12)]+'\t'+str(i)+'\t'+'none'+'\t'+'none'+'\t'+loclist[k-1][2]+'/'+loclist[k-2][2]+'\t'+str(int(loclist[k-1][1])-i)+'/'+str(i-int(loclist[k-2][0]))+'\t'+'none'+'\t'+'none'+'\n')
											else:
												print('ERROR.ERROR.ERROR.ERROR'+'\n')
									handle2.close()
					i+=1		

		 		 
				handle.close()

cout.close()
